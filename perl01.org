#+TITLE: Perl01
#+EXCLUDE_TAGS: noexport

* Inhalt :toc:noexport:
- [[#hallo-welt][Hallo Welt]]
- [[#ausgabe][Ausgabe]]
  - [[#ausgabe-von-zahlen][Ausgabe von Zahlen]]
  - [[#ausgabe-von-strings][Ausgabe von Strings]]
- [[#operatoren][Operatoren]]
  - [[#bit-operatoren][Bit-Operatoren]]
  - [[#vergleichsoperatoren][Vergleichsoperatoren]]
  - [[#boolsche-operatoren][Bool'sche Operatoren]]
  - [[#string-operatoren][String-Operatoren]]
- [[#variablen][Variablen]]
  - [[#scalar][Scalar]]
  - [[#scoping][Scoping]]
  - [[#listen][Listen]]
  - [[#arrays][Arrays]]
- [[#referenzen][Referenzen]]

* Hallo Welt
Aufbau ähnlich zu =bash= und =C=. Definition von Interpreter und Import von Packeten.
Flag "-w", um zusätzliche Interpreter-Warnungen mit anzuzeigen.
*Wichtig*: ";" am Zeilenende.

#+begin_src perl :results output :exports both
#!/usr/bin/perl -w
use strict;
use warnings;

print "Hallo Welt!\n";
#+end_src

#+RESULTS:
: Hallo Welt!

* Ausgabe
** Ausgabe von Zahlen
Perl interpretiert die Ausgabe von Zahlen generell als Dezimalzahl (=Integer=). Möchte man stattdessen binär oder hexadezimal, muss ein entsprechendes "Kontrollzeichen" davor stehen. Bei binär ist es eine =führende 0=, bei hexadezimal ein =führendes 0x=. Lange Zahlen können zur besseren Lesbarkeit durch "_" aufgeteilt werden.

#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print "Octal: ", 01111;
print "\n";
print "Binär: ", 0b1111;
print "\n";
print "Hex: ", 0xAF;
print "\n";
print "Deizomal: ", 1111;
print "\n";
print "Lange Zahl: ", 123_456_789;
print "\n";
print "Float: ", 3.141592654;
#+end_src

#+RESULTS:
: Octal: 585
: Binär: 15
: Hex: 175
: Deizomal: 1111
: Lange Zahl: 123456789
: Float: 3.141592654

** Ausgabe von Strings
Perl unterscheidet bei Strings in einfache und doppelte Anführungszeichen. Der Unterschied ist, wie bei =bash= auch, die Interpretierung von Steuerzeichen, wie "\t". Diese können aber durch ein "\" gecancelt werden. Es können auch verschiedene Zeichen kombiniert werden, sodass auch eine Ausgabe von Zitaten möglich wird. Eine weitere Alternative sind die sog. *quote-like operators*. Diese definieren ein umschließende Begrenzer des Textes und vereinfachen so die Lesbarkeit.
#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print 'Hallo\t Welt';
print "\n";
print "Hallo\t Welt";
print "\n";
print "Hallo\\t Welt";
print "\n";
print '"Halt, STOP!"';
print "\n";
print qq<'"Hallo Welt" wird oft als erstes Programm geschrieben'>;
print "\n";
print qq|'"Hallo Welt" wird oft als erstes Programm geschrieben'|;
print "\n";
print qq('"Hallo Welt" wird oft als erstes Programm geschrieben');
print "\n";
#+end_src

#+RESULTS:
: Hallo\t Welt
: Hallo	 Welt
: Hallo\t Welt
: "Halt, STOP!"
: '"Hallo Welt" wird oft als erstes Programm geschrieben'
: '"Hallo Welt" wird oft als erstes Programm geschrieben'
: '"Hallo Welt" wird oft als erstes Programm geschrieben'

* Operatoren
** Bit-Operatoren

#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print "8 AND 4: ", 8&4, "\n";
print "8 OR 4: ", 8|4, "\n";
print "8 XOR 4: ", 8^4, "\n";
print "NOT 4: ", ~4, "\n";
#+end_src

#+RESULTS:
: 8 AND 4: 0
: 8 OR 4: 12
: 8 XOR 4: 12
: NOT 4: 18446744073709551611

** Vergleichsoperatoren

#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print "8 == 4: ", 8==4, "\n";
print "8 > 4: ", 8>4, "\n";
print "8 < 4: ", 8<4, "\n";
print "8 != 4: ", 8!=4, "\n";
print "8 >= 4: ", 8>=4, "\n";
print "8 <= 4: ", 8<=4, "\n";
# folgender Operator ergibt: 0, falls gleich; -1, falls 4>8 und +1, falls 8>4
print "8 <=> 4: ", 8<=>4, "\n";

#+end_src

#+RESULTS:
: 8 == 4:
: 8 > 4: 1
: 8 < 4:
: 8 != 4: 1
: 8 >= 4: 1
: 8 <= 4:
: 8 <=> 4: 1

** Bool'sche Operatoren
Obacht bei ausgeschriebene Operatoren "and" und "or", hier wendet Perl eine "lazy evaluation" an und stoppt, sobald eine zutreffende Aussage erkannt wid. Daher wird u.a. der Zeilenumbruch der 2. Codezeile nicht dargestellt.
#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print "6>3 AND 3>4: ", 6>3 && 3>4, "\n";
print "6>3 AND 3>4: ", 6>3 and 3>4, "\n";
print "6>3 OR 3>4: ", 6>3 || 3>4, "\n";
print "6>3 OR 3>4: ", 6>3 or 3>4, "\n";
print "!(2>3): ", !(2>3), "\n";
print "!2>3: ", !2>3, "\n";
#+END_SRC

#+RESULTS:
: 6>3 AND 3>4:
: 6>3 AND 3>4: 16>3 OR 3>4: 1
: 6>3 OR 3>4: 1!(2>3): 1
: !2>3:

** String-Operatoren
*** Stings kombinieren
Bei Strings spielt es keine Rolle, ob man Sätze als Zusammenschluss mehrerer Wörter oder mittels des =concatenation operator= zusammensetzt. Letzteres geht etwas schneller. Ebenso werden Rechenoperationen zuerst ausgeführt und dann mit dem restlichen Text zusammengebastelt. Auch das mehrmalige Aneinanderhängen ist möglich.
#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print "Print ", "several ", "strings ", "here.","\n";
print "Print " . "several " . "strings " . "here." . "\n";
print "Sieben mal Sieben ergibt " . 7*7 . "\n";
print "Ha! "x3, "\n";
print "na"x(2*4) . " Batmaaaan!", "\n";
#+END_SRC

#+RESULTS:
: Print several strings here.
: Print several strings here.
: Sieben mal Sieben ergibt 49
: Ha! Ha! Ha!
: nananananananana Batman!

*** Strings vergleichen
Auch ein Vergleich von Strings ist möglich. Hier wird die Zeichenkette zeichenweise verglichen. Voraussetzung ist allerdings, dass er Operator *ausgeschrieben* wird.
#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print"Which came first, the chicken or the egg? ";
print "chicken" cmp "egg", "\n";
print "Are dogs greater than cats? ";
print "dog" gt "cat", "\n";
print "Is ^ less than + ? ";
print "^" lt "+", "\n";
#+END_SRC

#+RESULTS:
: Which came first, the chicken or the egg? -1
: Are dogs greater than cats? 1
: Is ^ less than + ?

Wendet man hingegen "gewöhnliche" Binäroperatoren an, wird der String zuerst in eine Zahl umgewandelt und dann verglichen. Da beide nicht mit einer Ziffer beginnen, werden beide gleichermaßen als "0" interpretiert. Die Umwandlung kann man selbst als Summe aus String und "0" nachvollziehen.
#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

print "'six' als Zahl: ", "six" + 0, "\n";
print "'four als Zahl: ", "four" + 0, "\n";
print "'sixand4' als Zahl: ", "sixand4" + 0, "\n";
print "'4andsix' als Zahl: ", "4andsix" + 0, "\n";

print "Test one: ", "four" eq "six", "\n";
print "Test two: ", "four" == "six", "\n";
#+END_SRC

#+RESULTS:
: 'six' als Zahl: 0
: 'four als Zahl: 0
: 'sixand4' als Zahl: 0
: '4andsix' als Zahl: 4
: Test one:
: Test two: 1


* Variablen
*Achtung!*: Perl hat einige geschützte Variablennamen. Dazu gehören u.a. "$a" und "$b". Diese können genutzt werden, sollten es aber nicht!
** Scalar
*** String
Scalar Variablen beginnen mit einem "$"-Zeichen. Man kann ihnen beliebige Datentypen zuweisen, deren Länge nur durch den Arbeitsspeicher begrenzt sind. Ihnen können im Verlauf des Programmes auch andere Werte zugewiesen werden ohne sie wieder neu initialisieren zu müssen.
#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

my $name = "Bob";
print "My name is ", $name, "\n";
$name = "Alice";
print "My name is ", $name, "\n";
#+END_SRC

#+RESULTS:
: My name is Bob
: My name is Alice


*** Integer
Variablen können auch Integer Werte zugewiesen werden; z.B. direkt aus einer Berechnung heraus.

#+begin_src perl :results output :exports both
#!/usr/bin/perl
use strict;
use warnings;

my $zahl1 = 2*3;
print "2 mal 3 macht: ", $zahl1, "\n";
$zahl1 += 3;
print "und 3 macht: ", $zahl1, "\n";
my $zahl2 = $zahl1*2;
print "mal 2 macht: ", $zahl2, "\n";
#+END_SRC

#+RESULTS:
: 2 mal 3 macht: 6
: und 3 macht: 9
: mal 2 macht: 18


Ebenso ist es möglich mehrere Variablen mit der selben Variable zu initialisieren.

#+begin_src perl :results output :export both
#!/usr/bin/perl
use strict;
use warnings;
my ($num1, $num2, $num3, $num4);

$num1 = $num2 = $num3 = $num4 = 5;
print "Zahlen: ", $num1, $num2, $num3, $num4, "\n";
#+end_src

#+RESULTS:
: Zahlen: 5555


** Scoping
*** lokal definierte Variablen
Variablen werden generell innerhalb einer bestimmten Laufzeitumgebung definiert; vgl. local/global.
In folgendem Beispiel wird zuerst eine Variable "$record" definiert, die innerhalb eines Blockes neu - und gänzlich unanhängig von der vorherigen - definiert wird und nur innerhalb es Blockes gültig ist; eine sog. *lexikale* Variable. Nach Ende des Blockes nennt man die Variable "out of scope".

#+begin_src perl :results output :export both
#!/usr/bin/perl
use strict;
use warnings;

my $record = 4;
print "Ausserhalb hat die Variable record den Wert ", $record, "\n";
{
    my $record;
    $record = 7;
    print "Innerhalb des Blockes hingegen ", $record, "\n";
}

print "Wieder ausserhalb wieder ", $record, "\n";
#+end_src

#+RESULTS:
: Ausserhalb hat die Variable record den Wert 4
: Innerhalb des Blockes hingegen 7
: Wieder ausserhalb wieder 4


*** global definierte Variable
Um eine Variable global zu definieren, nutzt man statt =my $var= =our $var=.

#+begin_src perl :results output :export both
#!/usr/bin/perl
use strict;
use warnings;

my $record = 4;
print "Ausserhalb hat die Variable record den Wert ", $record, "\n";
{
    my $record;
    $record = 7;
    print "Innerhalb des Blockes hingegen ", $record, "\n";
}

print "Wieder ausserhalb wieder ", $record, "\n\n";

our $var = 4;
print "Ausserhalb hat die Variable var den Wert ", $var, "\n";
{
    my $var;
    $var = 7;
    print "Innerhalb des Blockes hingegen ", $var, "\n";
}

print "Wieder ausserhalb wieder ", $var, "\n\n";

our $stuff = 4;
print "Ausserhalb hat die Variable stuff den Wert ", $var, "\n";
{
    our $stuff;
    $stuff = 7;
    print "Innerhalb des Blockes hingegen ", $stuff, "\n";
}

print "Wieder ausserhalb wieder ", $stuff, "\n";
#+end_src

#+RESULTS:
#+begin_example
Ausserhalb hat die Variable record den Wert 4
Innerhalb des Blockes hingegen 7
Wieder ausserhalb wieder 4

Ausserhalb hat die Variable var den Wert 4
Innerhalb des Blockes hingegen 7
Wieder ausserhalb wieder 4

Ausserhalb hat die Variable stuff den Wert 4
Innerhalb des Blockes hingegen 7
Wieder ausserhalb wieder 7
#+end_example

*** Standardeingabe
Definiere Variablen über Standardeingabe. (klappt in =org-babel= nicht richtig)
#+begin_src perl :results output :export both
#!/usr/bin/perl
use warnings;
use strict;

print "Gib' mir mal ne Zahl ,bidde: ";
my $zahl = <STDIN>;
print "Ach, was ist ", $zahl, " fuer eine schoene Zahl!\n"
#+end_src

#+RESULTS:
: Gib' mir mal ne Zahl ,bidde: Ach, was ist  fuer eine schoene Zahl!


** Listen
Listen werden oftmals mit der bereits bekannten *qq( ... )* geschrieben. Bei Listen unterscheidet es sich jedoch durch ein *qw( ... )*.

#+begin_src perl :results output :export both
#!/usr/bin/perl
use warnings;
use strict;

my $month = 0;
print qw(
    Januar  Februar Maerz
    April   Mai Juni
    Juli    August  September
    Oktober November    Dezember
    )[$month], "\n";

my $month = -1;
print qw(
    Januar  Februar Maerz
    April   Mai Juni
    Juli    August  September
    Oktober November    Dezember
    )[$month, $month+1, $month+5],"\n";

print qw(
    Januar  Februar Maerz
    April   Mai Juni
    Juli    August  September
    Oktober November    Dezember
    )[(1..4)],"\n";

print "Hochzaehlen: ", (1..9), "\n";
print "Runterzaehlen: ", (9..1), "\n";
print "Runterzaehlen: ", reverse(1..9), "\n";
#+end_src

#+RESULTS:
: Januar
: DezemberJanuarMai
: FebruarMaerzAprilMai
: Hochzaehlen: 123456789
: Runterzaehlen:
: Runterzaehlen: 987654321

** Arrays
Initialisierung mit "@" und unterscheiden sich von normalen Variablen gänzlich.
#+begin_src perl :results output :export both
#!/usr/bin/perl
use warnings;
use strict;

my @months;
my $months;
@months = qw(Januar Februar Maerz April Mai Juni Juli August September Oktober November Dezember);
$months = 3;
print @months, "\n";
print $months, "\n";
#+end_src

#+RESULTS:
: JanuarFebruarMaerzAprilMaiJuniJuliAugustSeptemberOktoberNovemberDezember
: 3

* Referenzen
Buch "Beginning Perl": https://learn.perl.org/books/beginning-perl/
